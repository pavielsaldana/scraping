devcontainer.json
"postCreateCommand": "npx playwright install --skip-browser-download",

requirements.txt
playwright

streamlit_app.py
if not os.path.exists("/home/appuser/.cache/ms-playwright"):
    os.system("playwright install")

helper_scripts.py
from playwright.async_api import async_playwright
async def retrieve_tokens(li_at):
    async with async_playwright() as p:
        browser = await p.chromium.launch(headless=True)
        context = await browser.new_context()
        await context.add_cookies([{
            'name': 'li_at',
            'value': li_at,
            'domain': '.linkedin.com',
            'path': '/',
            'secure': True,
            'httpOnly': True,
            'sameSite': 'None'
        }])
        page = await context.new_page()
        csrf_token = None
        async def log_request(request):
            nonlocal csrf_token
            if request.url.startswith('https://www.linkedin.com/sales-api/salesApiAccess'):
                csrf_token = request.headers.get('csrf-token')
        page.on('request', log_request)
        try:
            await page.goto('https://www.linkedin.com/sales/home')
        except Exception:
            await browser.close()
            print('The li_at cookie was misspelled or has expired. Please correct it and try again.')
            raise 'The li_at cookie was misspelled or has expired. Please correct it and try again.'
            return None, None, None, None
        await page.wait_for_timeout(5000)
        try:
            await page.goto('https://www.linkedin.com/sales/search/people?query=(filters%3AList((type%3ACURRENT_COMPANY%2Cvalues%3AList((id%3Aurn%253Ali%253Aorganization%253A18875652%2CselectionType%3AINCLUDED)))))')
        except Exception:
            await browser.close()
            print('The li_at cookie was misspelled or has expired. Please correct it and try again.')
            raise 'The li_at cookie was misspelled or has expired. Please correct it and try again.'
            return None, None, None, None
        await page.wait_for_timeout(10000)
        cookies = await context.cookies()
        cookies_dict = {}
        JSESSIONID = None
        li_a = None
        for cookie in cookies:
            cookies_dict[cookie['name']] = cookie['value']
            if cookie['name'] == 'JSESSIONID':
                JSESSIONID = cookie['value']
            elif cookie['name'] == 'li_a':
                li_a = cookie['value']
        await browser.close()
        return JSESSIONID, li_a, csrf_token, cookies_dict
asyncio.run(retrieve_tokens(li_at))